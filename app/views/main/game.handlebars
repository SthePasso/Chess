<div class="container">
  <div class="row">

    <div class="col-sm-6.5">
      <div class="game">
        <div id="board" style="width: 600px"></div>
        <div class="row">
          <div class="col-md-6" id="status">A vez é do jogador
            <b>branco</b>.</div>
          <div class="col-md-6 text-right" id="status">
            {{!--
            <b>{{session.nome}}</b>
            <b> x </b>{{session.nome}}</b> --}}
          </div>
        </div>
      </div>
    </div>

    <div class="chat">
      <div id="oponente" class = "truncate">{{nomeOponente}}</div><hr>
      <div id="chat-history" class="chat-history">
        <ul id="messages" style="list-style-type: none">
          {{{criarMensagens mensagensAntigas session.logado color}}}
        </ul>
      </div>
      <div class="chat-message clearfix">
        <textarea id="message-to-send" placeholder="Escreva sua mensagem" rows="3"></textarea>
        <button id="enviar">Enviar</button>
      </div>
    </div>


  </div>
</div>

<script src="/js/jquery.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script type="text/javascript" src="/js/chess.min.js"></script>
<script type="text/javascript" src="/js/chessboard-1.0.0.min.js"></script>

<script>
  const botao = document.getElementById('enviar');
  const msgs = document.getElementById('messages');
  const game = new Chess();
  const color = '{{color}}';
  const fen = '{{partida.fen}}';
  const partida = '{{ partida.id }}';
  const id_user_1 = '{{ partida.id_user_1}}';
  const id_user_2 = '{{ partida.id_user_2}}';
  const my_name = '{{session.nome}}';
  const my_id = Number.parseInt('{{session.logado}}', 10);
  const oponente = '{{nomeOponente}}';
  //  const oponente = id_user_1 == '{{session.logado}}'? '{{partida.user2.nome}}' : '{{partida.user1.nome}}' ;
  const socket = io({
    query: {
      id_partida: partida
    }
  });

  //Lógica do Chat  
  $("#enviar").click(() => {
    var mensagem = $("#message-to-send").val();
    if (!mensagem.trim()) return;

    var message = {
      id_user: my_id,
      name: my_name,
      mensagem: mensagem,
      now: Date.now(),
    };
    socket.emit('salvar-msg', message);
    appendMensagem(message);
    $("#message-to-send").val("");
    $("#chat-history").scrollTop($("#messages").height());
  })

  socket.on('nova-msg', (message) => {
    appendMensagem(message);
  });

  function appendMensagem(message) {
    var propria =  message.id_user == my_id;
    var align = propria ? 'right' : 'left';
    var cor = propria ? (color == 'b' ? 'black' : 'white') : (color == 'b' ? 'white' : 'black'); 
    var raw = `
      <li class="${align}-message ${cor}-message">
        <div class="message-data">
          ${propria ? '' : '<span class="message-piece"><i class="fas fa-chess-king"></i></span>'}
          <span class="message-data-time">${new Date(message.now).toLocaleTimeString()}</span>
          ${propria ? '<span class="message-piece"><i class="fas fa-chess-king"></i></span>' : ''}
        </div>
        <div class="message">${message.mensagem}</div>
      </li>
    `;

    $("#messages").append(raw);

    $("#message-to-send").val('');
    $("#chat-history").scrollTop($('#messages').height());
  }
  $("#chat-history").scrollTop($("#messages").height());
  //Lógica do Game
  game.load(fen); // fen é a posição das peças no tabuleiro

  const board = Chessboard('board', {
    draggable: true,
    orientation: (color == 'w') ? 'white' : 'black',

    position: fen,
    moveSpeed: 'slow',
    pieceTheme: '/img/chesspieces/wikipedia/{piece}.png',
    onDragStart: onDragStart, // quando o usuário pega a peça, para começar seu movimento
    onDrop: onDrop, // quando o usuário solta a peça, para encerrar seu movimento
    onSnapEnd: onSnapEnd // quando um jogador come a peça do outro, ou quando o peao chega no topo do campo do outro
  });

  function onDragStart(source, piece, position, orientation) {

    // nao permitir o movimento de peças em caso de game over
    if (game.game_over()) return false;

    // permitir apenas o movimento de peças de sua própria cor
    if ((color === 'w' && piece.search(/^b/) !== -1) ||
      (color === 'b' && piece.search(/^w/) !== -1)) {
      return false
    }

    // o jogador só pode mover peças caso seja sua vez de jogar
    if ((game.turn() === 'w' && piece.search(/^b/) !== -1) ||
      (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
      return false
    }
  }

  function onDrop(source, target) {

    // verificar se o movimento feito é legal de acordo com as regras de xadrez
    var move = game.move({//qual o movimento do usuario
      from: source,
      to: target,
      promotion: 'q' // NOTA: Para manter a simplicidade, peões só poderão ser promovidos para rainhas
    });

    // movimento ilegal, vamos retroceder a peça para a posição original
    if (move === null) return 'snapback'

    // **** Usar SOCKET.IO para enviar o movimento para o adversário **** // 
    socket.emit('move', {
      partida: partida,
      id_user_1: id_user_1,
      id_user_2: id_user_2,
      from: source,
      to: target,
      promotion: 'q',
      position: game.fen()
    });
    updateStatus();
  }

  function onSnapEnd() {
    board.position(game.fen())
  }

  function updateStatus() {
    var status = ''

    var moveColor = '<b>branco</b>'
    if (game.turn() === 'b') {
      moveColor = '<b>preto</b>'
    }

    // checkmate?
    if (game.in_checkmate()) {
      status = 'É xeque-mate! Vitória do jogador ' + moveColor + '!'
    }

    // empate? (draw)
    else if (game.in_draw()) {
      status = 'O jogo empatou!'
    }

    // o jogo continua
    else {
      status = 'A vez é do jogador ' + moveColor + '.'

      // check?
      if (game.in_check()) {
        status += ', o jogador ' + moveColor + ' está em xeque.'
      }
    }

    document.getElementById('status').innerHTML = status;
  }

  socket.on('move', (move) => {
    board.move(move.from + '-' + move.to)
    game.move({
      partida: partida,
      id_user_1: id_user_1,
      id_user_2: id_user_2,
      from: move.from,
      to: move.to,
      promotion: 'q',
      position: game.fen()
    })
    updateStatus();
  });
</script> {{!--
<script>

  (function () {

    $("#chat-history").scrollTop($('#messages').height());

    const socket = io();
    const partida = 44;
    const user_w = '16';
    const user_b = '15';
    const user_current = '16';
    const my_color = 'white';
    const my_name = 'Sthefanie Jofer Gomes Passo';
    const op_color = 'black';
    const op_name = 'Rayane M. Pinheiro';
    const $status = $('#status');

    socket.emit('b_ok', { partida: partida });

    $("#enviar").click(function () {
      let mensagem = {
        partida: 44,
        user: { id: user_current, nome: my_name },
        color: my_color,
        mensagem: $("#message-to-send").val(),
        date: new Date(Date.now()).toLocaleString()
      };
      socket.emit('mensagem', mensagem);
      $("#message-to-send").val("");
      appendMensagem(mensagem, 'right', my_color);
      $("#chat-history").scrollTop($('#messages').height());
    });

    $("#message-to-send").keypress(function (e) {
      if (e.which == 13) {
        $("#enviar").click();
        return false;
      }
    });

    socket.on('mensagem', function (mensagem) {
      appendMensagem(mensagem, 'left', op_color);
      $("#chat-history").scrollTop($('#messages').height());
    });

    function appendMensagem(mensagem, align, color) {

      if (align == 'left') {
        var messageData =
          `<div class="message-data">
          <span class="message-piece"><i class="fas fa-chess-king"></i></span>              
          <span class="message-data-name" >${mensagem.user.nome}</span>
          <span class="message-data-time" >${mensagem.date}</span>  
        </div>`;
      } else {
        var messageData =
          `<div class="message-data">
          <span class="message-data-time" >${mensagem.date}</span>            
          <span class="message-data-name" >${mensagem.user.nome}</span>          
          <span class="message-piece"><i class="fas fa-chess-king"></i></span>              
        </div>`;
      }

      var newMessage =
        `<li class="${align}-message ${color}-message clearfix">
        ${messageData}
        <div class="message">
          ${mensagem.mensagem}
        </div>        
      </li>`;

      $("#messages").append(newMessage);
    }
</script> --}}